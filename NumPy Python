#NumPy is a multidimensional array library
#why use NumPy over List? NumPy is fast compared to lists as NumPy uses fixed types(faster to read less bytes of memory)
# Application of NumPy -- Mathematice (MATLAB replacememt)


#BASICS
import numpy as np
a = np.array([1, 2, 3])
print(a)
b = np.array([[9.0, 8.0, 7.0],[6.0, 5.0, 4.0]])
print(b)

#Getting Dimension
b.ndim

#Getting shape(rows, columns)
b.shape

#Getting type
a.dtype
b.dtype

#Getting size
a.itemsize

#Getting total size
a.size * a.itemsize
a.nbytes


#ACCESSING/CHANGING SPECIFIC ELEMENTS, ROWS, COLUMNS, ETC
a = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])
a.shape
#Getting a specific element [r, c]
a[1, 5]
#Getting a specific row
a[0, :]
#Getting a specific columm
a[:, 2]
#Getting elements in between the matrix [startindex:endindex:stepsize]
a[0, 1:6: -2]
#Replacing specific element
a[1, 5] = 20 
print(a)
#Repalcing one multiple number with one fixed number
a[:, 2] = 5
print(a)
a[:, 2] = [1,2]
print(a)


#INITIALIZING DIFFERENT TYPES OF ARRAYS
#All 0s matrix
np.zeros((2,3))
#All 1s matrix
np.ones((4,2,2))
#All any other number
np.full((2,2), 99)
a = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])
np.full_like(a, 4)
#Random decimal numbers
np.random.rand(4, 2, 3)
#Random integer values
np.random.randint(7)
np.random.randint(7, size=(3,3))
np.random.randint(2, 7, size=(3,3))
#Identity matrix
np.identity(5)
#Making shape arrays
arr = np.array([[1, 2, 3]])
r1 = np.repeat(arr, 3, axis=1)
r1 = np.repeat(arr, 3, axis=0)
print(r1)
#Copying arrays
a = np.array([1,2,3])
b = a.copy()
b[0] = 100
print(a)
print(b)

#CHALLENGE
output = np.ones((5,5))
print(output)
z = np.zeros((3,3))
z[1,1] = 9
print(z)
output[1:4, 1:4] = z
print(output)



#MATHEMATICS
a = np.array([1,2,3,4])
print(a)
a + 2
a - 2
a * 2
a / 2
b = np.array([1,0,1,0])
a + b
a ** 2
#Take the sin
np.sin(a)
np.cos(a)



#LINEAR ALGEBRA
a = np.ones((2,3))
print(a)
b = np.full((3,2),2)
print(b)
#Multiplication
np.matmul(a,b)
#finding the determinent
c = np.identity(3)
np.linalg.det(c)



#STATISTICS
stats = np.array([[1,2,3],[4,5,6]])
print(stats)
np.min(stats)
np.min(stats, axis=1)
np.max(stats)
np.sum(stats)



#REORGANIZING ARRAYS
before = np.array([[1,2,3,4],[5,6,7,8]])
print(before)
after = before.reshape((8,1))
print(after)
#Vertically stacking vectors
v1 = np.array([1,2,3,4])
v2 = np.array([4,5,6,7])
np.vstack([v1, v2])
#Horizontal stack
h1 = np.ones((2,4))
h2 = np.zeros((2,2))
np.hstack([h1, h2])



#MISCELLANEOUS
#loading data from file
filedata = np.genfromtext('data.txt', delimiter=',')
filedata.astype('int32')
print(filedata)


#BOOLEAN MASKING AND ADVANCED INDEX
filedata [filedata > 50]
#indexing with a list in NumPy
np.array([1,2,3,4,5,6,7,8,9])
a[[1,2,8]]


#CHALLENGE












